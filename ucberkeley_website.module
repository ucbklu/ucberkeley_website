<?php

/**
 * @file ucberkeley_website.module
 * TODO: Enter file description here.
 */

define('TERMINUS_PATH', 'sites/all/libraries');
//TODO: When the settings form is configured with cache_dir should run a terminus command to create that dir.
define('TERMINUS_CACHE_DIR', '/terminus/cache');

function ucberkeley_website_export_terminus_cache_dir() {
  return "export TERMINUS_CACHE_DIR=" . variable_get('file_temporary_path', '/tmp') . TERMINUS_CACHE_DIR;
}

/**
 * Implements hook_menu().
 */
function ucberkeley_website_menu() {
  $items['web-hosting/get-open-berkeley'] = array(
    'title' => 'Get a new Open Berkeley Website',
    'description' => 'Create a new Open Berkeley Website',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ucberkeley_website_openberkeley_form'),
    'access arguments' => array('access content'),
    'menu_name' => 'main-menu',
    'plid' => 2283,
  );
  $items['web-hosting/my-sites'] = array(
    'title' => 'My Websites',
    'description' => 'List your websites',
    'page callback' => 'ucberkeley_website_demo_mysites',
    'access arguments' => array('access content'),
    'menu_name' => 'main-menu',
    'plid' => 2283,
  );

  return $items;
}


/**
 * Form to request a managed openberkeley site
 *
 * @return mixed
 */
function ucberkeley_website_openberkeley_form($form, &$form_state) {
  global $user;
  $account = user_load($user->uid);
  drupal_set_title(t('Start Building Your Website with Open Berkeley'));

  $agree_yes = "I agree";
  $agree_no = "I do not agree";

  // *** Temporary styling for the form in lieu of using theme functions or stylesheet ***

  //Set options for drupal_add_css (http://api.drupal.org/api/drupal/includes%21common.inc/function/drupal_add_css/7)
  $options = array(
    'type'  => 'inline',
    'group' => CSS_DEFAULT,
  );  
    
  // Make fieldset legends more visible 
  $css = ".fieldset-legend {font-weight: bold;}";
  drupal_add_css($css, $options);

  // Add spacing between fieldsets
  $css = ".form-wrapper {margin: 5px 2px;}";
  drupal_add_css($css, $options);  

  // Add spacing around fieldset descriptions
  $css = ".fieldset-description {padding: 5px 0;}";
  drupal_add_css($css, $options);  

  // Adjust default form item spacing within fieldsets
  $css = ".fieldset-wrapper .form-item {margin: 1em 0;}";
  drupal_add_css($css, $options);    


  // *** MOU ***

  $form['mou'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Memorandum of Understanding'),
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['mou']['mou_link'] = array(
    '#markup' => '<div>Please review our <strong>' . l(t("Memorandum of Understanding (MOU)"), "web-hosting/MOU-TOS/managed") . '</strong>.</div>'
  );
  $form['mou']['mou_agree'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => t('Do you agree with our MOU?'),
    '#description' => "",
    '#default_value' => 0,
    '#options' => array(t($agree_no), t($agree_yes)),
  );

  // *** Requester ***

  $form['requester'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Requester Information'),
    '#description' => t('These values cannot be changed.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#disabled' => TRUE,
  );
  $form['requester']['requester_name'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Requester Name'),
    '#description' => t(''),
    '#default_value' => $account->name,
    '#disabled' => TRUE,
  );
  $form['requester']['requester_email'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Requester Email'),
    '#description' => t(''),
    '#default_value' => $account->mail,
  );
  $form['requester']['request_timestamp'] = array(
    '#type' => 'hidden',
    '#title' => "Time of request",
    '#value' => "",
  );

  // *** Organization Sponsors ***

  $form['sponsor'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Organization Sponsor'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('If your website will be under one of the following organization sponsors, please check the appropriate box.'),    
  );

  $form['sponsor']['ist'] = array(
    '#type' => 'checkbox',
    '#title' => t('Information Services and Technology'),
    '#description' => t('See the <a href="@href1"> Technology@Berkeley</a>, website for the Office of the CIO website.', array('@href1' => 'http://technology.berkeley.edu',))
  );  

  $form['sponsor']['ets'] = array(
    '#type' => 'checkbox',
    '#title' => t('Educational Technology Services'),
    '#description' => t('Check this box for the standard ETS configuration.')
  );    

  // *** Website Information ***

  $form['website_info'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Website Information'),
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['website_info']['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Site Name (Required)'),
    '#description' => "",
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['website_info']['site_short_name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Site Short Name (Required)'),
    '#description' => t('This name should contain only lower case letters, numbers and dashes. (Spaces are not allowed.) This will be used in the url of the test version of your site. For example your Site Name might be "My Very Important Site" but you may want your Site Short Name to be "my-site".'),
    '#default_value' => "",
  );
  $form['website_info']['live_url'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Anticipated Live URL (Example: my-site.berkeley.edu)'),
    '#description' => t(''),
    '#default_value' => "",
  );
  $form['website_info']['site_email'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Site Email (Required)'),
    '#description' => t('Please use a <a href="@href1">bConnected Departmental Domain</a>, also known as a Special Purpose Account (SPA)', array('@href1' => 'https://calmail.berkeley.edu/docs/domainlist.html',)),
    '#default_value' => "",
  );
  $form['website_info']['parent_org'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Parent Organization (if applicable)'),
    '#description' => t(''),
    '#default_value' => "",
  );

  // *** People ***

  $form['people'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('People'),
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['people']['functional_owner'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Functional Site Owner'),
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['people']['functional_owner']['functional_owner_markup'] = array(
    '#markup' => '<div>' . "The functional owner is the primary decision-maker for your website." . '</div>',
  );
  $form['people']['functional_owner']['functional_owner_name'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Name (Required)'),
    '#description' => t(''),
    '#default_value' => "",
    '#prefix' => '<div class="container-inline">',
    '#size' => 25,
    '#required' => TRUE,    
  );
  $form['people']['functional_owner']['functional_owner_email'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Email (Required)'),
    '#description' => t(''),
    '#default_value' => "",
    '#size' => 25,
    '#suffix' => '</div>',
    '#required' => TRUE,    
  );

  // Increment the counter for "add another" fields
  if (isset($form_state['triggering_element']['#ajax']['wrapper'])) {
    $type = $form_state['triggering_element']['#ajax']['wrapper'];
    $form_state['storage'][$type . '_number']++;
  }

  // *** Site Builders ***

  $form['people']['site_builders'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Site Builders'),
    '#description' => t("Site Builders can edit and create content, manage menus and categories, add and edit redirects, change page layouts and use panels, delete content and block users, and more. This role is the most advanced role available on Open Berkeley sites. Please ensure that anyone with Site Builder role attends a " . l(t("Site Builder training"), "https://wikihub.berkeley.edu/display/drupal/Training") . ".<p>Please add the person who will serve as this website's initial primary Site Builder. If this person has not yet attended a Site Builder training, please make sure the individual does so before starting work on your website. This Site Builder may add additional users to your website at any time. Any additional Site Builders should also attend trainings.</p>" . "User ID numbers (UIDs) can be found in the " . l(t("Campus Directory "), "http://www.berkeley.edu/directory")),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form_state['storage']['site_builders_number'] = isset($form_state['storage']['site_builders_number']) ? $form_state['storage']['site_builders_number'] : 1;

  $form['people']['site_builders']['site_builders_container'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#prefix' => '<div id="site_builders">',
    '#suffix' => '</div>',
  );

  if ($form_state['storage']['site_builders_number']) {
    for ($i = 1; $i <= $form_state['storage']['site_builders_number']; $i++) {
      $form['people']['site_builders']['site_builders_container'][$i] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
      );

      $form['people']['site_builders']['site_builders_container'][$i]['site_builder_name'] = array(
        '#type' => 'textfield',
        '#required' => FALSE,
        '#title' => t('Name (Required)'),
        '#description' => t(''),
        '#default_value' => "",
        '#prefix' => '<div class="container-inline">',
        '#size' => 25,
        '#required' => TRUE,         
      );
      $form['people']['site_builders']['site_builders_container'][$i]['site_builder_uid'] = array(
        '#type' => 'textfield',
        '#required' => FALSE,
        '#title' => t('UID (Required)'),
        '#description' => t(''),
        '#default_value' => "",
        '#size' => 25,
        '#suffix' => '</div>',
        '#required' => TRUE, 
      );
    }
  }
  /* Remove ability to add multiple Site Builders on initial submit */
  /*
  $form['people']['site_builders']['add_site_builder'] = array(
    '#type' => 'button',
    '#value' => t('Add another Site Builder'),
    '#href' => '',
    '#ajax' => array(
      'callback' => 'ucberkeley_website_ajax_add_row',
      'wrapper' => 'site_builders',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
    '#submit' => array(),
  );
  */

  // *** Editors ***

  $form['people']['editors'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Editors'),
    '#description' => t('Editors can edit and create content, as well as edit files.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form_state['storage']['editors_number'] = isset($form_state['storage']['editors_number']) ? $form_state['storage']['editors_number'] : 1;

  $form['people']['editors']['editors_container'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#prefix' => '<div id="editors">',
    '#suffix' => '</div>',
  );

  if ($form_state['storage']['editors_number']) {
    for ($i = 1; $i <= $form_state['storage']['editors_number']; $i++) {
      $form['people']['editors']['editors_container'][$i] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
      );

      $form['people']['editors']['editors_container'][$i]['editor_name'] = array(
        '#type' => 'textfield',
        '#required' => FALSE,
        '#title' => t('Name'),
        '#description' => t(''),
        '#default_value' => "",
        '#prefix' => '<div class="container-inline">',
        '#size' => 25,
      );
      $form['people']['editors']['editors_container'][$i]['editor_uid'] = array(
        '#type' => 'textfield',
        '#required' => FALSE,
        '#title' => t('UID'),
        '#description' => t(''),
        '#default_value' => "",
        '#size' => 25,
        '#suffix' => '</div>',
      );
    }
  }
  $form['people']['editors']['add_editor'] = array(
    '#type' => 'button',
    '#value' => t('Add another Editor'),
    '#href' => '',
    '#ajax' => array(
      'callback' => 'ucberkeley_website_ajax_add_row',
      'wrapper' => 'editors',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
    '#submit' => array(),
  );

  // *** Contributors ***

  $form['people']['contributors'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Contributors'),
    '#description' => t('Contributors can create and edit their own content, and cannot edit content created by others.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form_state['storage']['contributors_number'] = isset($form_state['storage']['contributors_number']) ? $form_state['storage']['contributors_number'] : 1;

  $form['people']['contributors']['contributors_container'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#prefix' => '<div id="contributors">',
    '#suffix' => '</div>',
  );

  if ($form_state['storage']['contributors_number']) {
    for ($i = 1; $i <= $form_state['storage']['contributors_number']; $i++) {
      $form['people']['contributors']['contributors_container'][$i] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
      );

      $form['people']['contributors']['contributors_container'][$i]['contributor_name'] = array(
        '#type' => 'textfield',
        '#required' => FALSE,
        '#title' => t('Name'),
        '#description' => t(''),
        '#default_value' => "",
        '#prefix' => '<div class="container-inline">',
        '#size' => 25,
      );
      $form['people']['contributors']['contributors_container'][$i]['contributor_uid'] = array(
        '#type' => 'textfield',
        '#required' => FALSE,
        '#title' => t('UID'),
        '#description' => t(''),
        '#default_value' => "",
        '#size' => 25,
        '#suffix' => '</div>',
      );
    }
  }
  $form['people']['contributors']['add_contributor'] = array(
    '#type' => 'button',
    '#value' => t('Add another contributor'),
    '#href' => '',
    '#ajax' => array(
      'callback' => 'ucberkeley_website_ajax_add_row',
      'wrapper' => 'contributors',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
    '#submit' => array(),
  );

  // *** Billing and Hosting ***

  $form['billing_hosting'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Billing/Hosting Information'),
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['billing_hosting']['billing_contact'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Billing Contact'),
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE, 
  );

  $form['billing_hosting']['billing_contact']['name'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Billing Contact Name (Required)'),
    '#description' => t(''),
    '#default_value' => "",
    '#prefix' => '<div class="container-inline">',
    '#size' => 25,
    '#required' => TRUE,
  );

  $form['billing_hosting']['billing_contact']['email'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Billing Contact Email (Required)'),
    '#description' => t(''),
    '#default_value' => "",
    '#suffix' => '</div>',
    '#size' => 25,
    '#required' => TRUE,  
  );

  $form['billing_hosting']['hosting_plan'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Hosting Plan'),
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['billing_hosting']['hosting_plan']['hosting_plan_markup'] = array(
    '#markup' => '<div>' . "Open Berkeley websites are hosted on Pantheon, an external hosting service. For a breakdown of available hosting plans, please see " . l(t("Pantheon Hosting"), "") . '.</div>',
  );
  $form['billing_hosting']['hosting_plan']['plan'] = array(
    '#type' => 'radios',
    '#required' => FALSE,
    '#title' => t('Select a hosting plan'),
    '#description' => t(''),
    '#default_value' => "",
    '#options' => array("Personal Plan ($20/month)", "Professional Plan ($75/month)", "Business Plan ($300/month)"),
  );
  $form['billing_hosting']['hosting_plan']['note_markup'] = array(
    '#markup' => '<div>Note: If the Enterprise Plan is desired, please contact ' . l(t("IST Drupal"), "mailto:ist-drupal@berkeley.edu") . ' and provide details about what you are looking to do.</div>',
  );


  $form['billing_hosting']['coa'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Chart of Accounts'),
    '#description' => t(''),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['billing_hosting']['coa']['business_unit'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Business Unit (Required)'),
    '#description' => t(''),
    '#default_value' => "",
  );
  $form['billing_hosting']['coa']['account'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Account (Required)'),
    '#description' => t(''),
    '#default_value' => "",
  );
  $form['billing_hosting']['coa']['fund'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Fund Code (Required)'),
    '#description' => t(''),
    '#default_value' => "",
  );
  $form['billing_hosting']['coa']['department'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Department (Organization) (Required)'),
    '#description' => t(''),
    '#default_value' => "",
  );
  $form['billing_hosting']['coa']['program'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Program (Required)'),
    '#description' => t(''),
    '#default_value' => "",
  );
  $form['billing_hosting']['coa']['chart1'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Chartfield 1 (Project)'),
    '#description' => t(''),
    '#default_value' => "",
  );
  $form['billing_hosting']['coa']['chart2'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Chartfield 2 (Project)'),
    '#description' => t(''),
    '#default_value' => "",
  );
  $form['submission'] = array(
    '#markup' => '<div><p><i>' . t('Please review your form entries before submitting.') . '</i></p></div>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start Building Your Website with Open Berkeley!'),
  );

  return $form;
}

function ucberkeley_website_openberkeley_form_validate($form, &$form_state) {
  //TODO: check_plain user input!

  if ($form_state['values']['mou']['mou_agree'] == 0) {
    //form_set_error('i_agree_to_the_terms_of_service_at_link', t('Sorry, but you must agree to the terms of service.'));
    form_set_error('mou_agree', t('Sorry, but you must agree to our Memorandum of Understanding.'));
  }
  //TODO: do a sites info to ensure that there is not already a site with that name

  //TODO: Remove empty editor, builders, contributors
  return TRUE;
}

function ucberkeley_website_ajax_add_row($form, &$form_state) {
  $type = $form_state['triggering_element']['#ajax']['wrapper'];
  return $form['people'][$type][$type . '_container'];
}

function ucberkeley_website_openberkeley_form_submit($form, &$form_state) {
  set_time_limit(0); //unlimited. This can take a while.

  if (!ucberkeley_website_terminus_auth_check()) {
    ucberkeley_website_terminus_authenticate();
  }

  $submit_time = time();
  $form_state['values']['requester']['request_timestamp'] = $submit_time;

  if (variable_get('ucberkeley_website_demo', 0) != 1) {
    ucberkeley_website_container_spin_up($form_state);
    ucberkeley_website_install_ob($form_state);
  }
  else {
    // Exclude unnecessary elements.
    form_state_values_clean($form_state);
    //get past submissions
    $submissions = variable_get('ucberkeley_website_submissions', array());
    //add this submission
    $submissions[$submit_time] = $form_state;
    variable_set('ucberkeley_website_submissions', $submissions);
    $form_state['redirect'] = "web-hosting/my-sites";
    ucberkeley_website_email_confirm($form_state);

    // Batch API to make it look more impressive :-)
    $operations = array();
    $operations[] = array('ucberkeley_website_sleep', array(2));
    $operations[] = array('ucberkeley_website_sleep2', array(1));
    $operations[] = array('ucberkeley_website_sleep3', array(3));

    $batch = array(
      'operations' => $operations,
      'finished' => 'ucberkeley_website_new_openberkeley_site_batch_finished',
      'title' => t('Spin-up a new Open Berkeley Website'),
      'init_message' => t('Initiating site creation...'),
      'progress_message' => t('@percentage% complete...'),
      'error_message' => t('Splat! We hit an error.')
    );
    batch_set($batch);

  }
  //logout?
}

function ucberkeley_website_sleep($seconds, &$context) {
  $context['message'] = t('Spinning up a Pantheon container...');
  sleep($seconds);
  $context['finished'] = 1.0;
}

function ucberkeley_website_sleep2($x, &$context) {
  $seconds = 3;
  $context['message'] = t('Unleashing mad skilz...');
  exec("sleep $seconds");
  $context['finished'] = 1.0;
}

function ucberkeley_website_sleep3($seconds, &$context) {
  $context['message'] = t('Installing Open Berkeley...');
  sleep($seconds);
  $context['finished'] = 1.0;
}

function ucberkeley_website_new_openberkeley_site_batch_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    //drupal_set_message(t('Spin up of site complete.'));
    //drupal_set_message(implode("<br />", $results));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }

}

function ucberkeley_website_terminus_auth_check() {
  $terminus_auth_whoami_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . "/terminus-034b auth whoami";
  $output = system($terminus_auth_whoami_cmd, $return);
  //drupal_set_message("Login Check: Return = $return. Output = $output");
  // return will be 0 if you are not logged in, so check output
  if ($return !== 0) {
    drupal_set_message("Error checking ", "error");
  }
  if (trim($output) == "You are not logged in.") {
    return FALSE;
  }
  return TRUE;
}

function ucberkeley_website_terminus_authenticate() {
  //TODO: poss to use custom server variables yet?
  global $conf, $export_terminus_cache;
  $terminus_authenticate_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . sprintf("/terminus-034b auth login %s --password='%s'", $conf['ut'], $conf['pt']);
  exec($terminus_authenticate_cmd, $output, $return);
  $output = implode("\n", $output);
  //TODO: Make these next two watchdog
  //drupal_set_message("Authenticating: $terminus_authenticate_cmd");
  if (strpos($output, "Logging in as") === FALSE) {
    drupal_set_message("Authenticating: Failure (return=$return) output=" . $output, "error");
    return FALSE;
  }
  //drupal_set_message("Authenticating: Success.");
}

function ucberkeley_website_terminus_site_info() {
  global $export_terminus_cache;
  $terminus_site_info_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . "/terminus-034b site info --site=ob7-fresh-012015-bw-02 --nocache";
  exec($terminus_site_info_cmd, $output, $return);
  $output = implode("\n", $output);
  //$output = system($terminus_site_info_cmd, $return);
  drupal_set_message($terminus_site_info_cmd);
  drupal_set_message("Site Info Return = $return Output = $output");

}

function ucberkeley_website_container_spin_up($form_state) {

  drupal_set_message("Spinning-up a site");

  $product_uuid = '87774fa4-b570-4300-a693-1c98b61457cd';
  $organization_uuid = '430c1947-354f-459a-8755-f38293aef105';
  $organization_test_uuid = '430c1947-354f-459a-8755-f38293aef105';
  $organization_test_name = 'uc-berkeley-testing';
  $organization_name = 'uc-berkeley';

  $site_name = $form_state['values']['website_info']['site_name'];

  // By default associate the site with the "UC Berkeley - Testing" organization
  $terminus_sites_create_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . "/terminus-034b sites create --product=$product_uuid --name=$site_name --label=$site_name --org=$organization_test_uuid";
  drupal_set_message($terminus_sites_create_cmd);
  exec($terminus_sites_create_cmd, $output, $return);
  if ($return !== 0) {
    drupal_set_message("Error creating container. ($return) Output:<br />" . implode("<br />", $output), "error");
  }
  unset($output);
  unset($return);

  //if (!$form_state['values']['test_org']) {
  if (FALSE) {
    // Associate the site with the "UC Berkeley" organization
    // 1/23/15: Temporary procedure: https://wikihub.berkeley.edu/display/drupal/Terminus+v2+CLI#Terminusv2CLI-UsingTerminustocreateanewOpenBerkeley7site
    $terminus_site_organizations_add_cmd = "terminus-034b site organizations add --site=$site_name --org=$organization_name --nocache";
    // changing max to 1. i.e. don't try repeatedly.  No longer backgrounding the site create command. Edge cases....
    exec($terminus_site_organizations_add_cmd, $output, $return);
    unset($output);
    unset($return);

    $terminus_site_instrument_cmd = "terminus-034b site instrument --change-to-org=$organization_uuid --site=$site_name --nocache";
    exec($terminus_site_instrument_cmd, $output, $return);
    unset($output);
    unset($return);

    $terminus_site_organizations_remove_cmd = "terminus-034b site organizations remove --site=$site_name --org=$organization_test_uuid --nocache";
    exec($terminus_site_organizations_remove_cmd, $output, $return);
    unset($output);
    unset($return);
  }
  drupal_set_message("Spin-up of \"$site_name\" complete.");
}

function ucberkeley_website_add_team($form_state) {

  $administrators = variable_get('ucberkeley_website_administrators', array());
  foreach (array_keys($administrators) as $email) {
    //0.3.4 -it's broken in this version
    //$terminus_site_team_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . "/terminus-034b site team add --site=" . $form_state['values']['website_info']['site_name'] . " --member=$email --nocache";
    // requires 0.4-beta or higher
    $terminus_site_team_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . "/terminus site team add-member --site=" . $form_state['values']['website_info']['site_name'] . " --member=$email --nocache";

    exec($terminus_site_team_cmd, $output, $return);
    drupal_set_message($terminus_site_team_cmd);
    if ($return !== 0) {
      drupal_set_message(t("Failed to add team member @email", array("@email" => $email)), "error");
      drupal_set_message("Return=$return. Out = " . implode("<br>", $output));
    }
  }
}

function ucberkeley_website_install_ob($form_state) {

  // The terminus drush site-install.  Must be in SFTP mode. https://github.com/pantheon-systems/cli/issues/141
  $terminus_site_cmode_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . "/terminus-034b site connection-mode --site=" . $form_state['values']['website_info']['site_name'] . " --env=dev --set=sftp --nocache";
  exec($terminus_site_cmode_cmd, $output, $return);
  drupal_set_message($terminus_site_cmode_cmd);
  drupal_set_message("Cmode=sftp return=$return output:<br />" . implode("<br />", $output));
  unset($return);
  unset($output);

  // give the connection mode some time
  sleep(10);

  $administrators = variable_get('ucberkeley_website_administrators', array());
  $drush_site_install_cmd = "drush -y site-install openberkeley --site-mail=bwood+01@berkeley.edu --site-name=" . $form_state['values']['website_info']['site_name'];
  $drush_site_install_cmd .= " --account-mail=bwood+01@berkeley.edu --account-name=ucbadmin install_configure_form.update_status_module=\"array\(FALSE,FALSE\)\"";
  $drush_site_install_cmd .= " openberkeley_add_admin_form.cas_name= " . implode(',', array_values($administrators));
  $drush_site_install_cmd .= " --account-mail=bwood+01@berkeley.edu";
  $drush_site_install_cmd .= " --site=" . $form_state['values']['website_info']['site_name'];
  $terminus_drush_site_install_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . "/terminus-034b " . $drush_site_install_cmd;
  drupal_set_message($terminus_drush_site_install_cmd);
  exec($terminus_drush_site_install_cmd, $output, $return);
  drupal_set_message("Site-install return=$return output:<br />" . implode("<br />", $output));
  unset($return);
  unset($output);

  /*

    // Commit the changes to settings.php
    $terminus_site_code_commit = ucberkeley_website_export_terminus_cache_dir() . " && " . 'echo "y" |' . TERMINUS_PATH . '/terminus-034b site code commit --message="Install Open Berkeley" --env=dev --site=' . $form_state['values']['website_info']['site_name'];
    exec($terminus_site_code_commit, $output, $return);
    drupal_set_message($terminus_site_code_commit);
    drupal_set_message("Commit return=$return output:<br />" . implode("<br />", $output));
    unset($return);
    unset($output);

    // Set connection-mode back to Git
    $terminus_site_cmode_cmd = ucberkeley_website_export_terminus_cache_dir() . " && " . TERMINUS_PATH . "/terminus-034b site connection-mode --site=" . $form_state['values']['website_info']['site_name'] . " --env=dev --set=git --nocache";
    exec($terminus_site_cmode_cmd, $output, $return);
    drupal_set_message($terminus_site_cmode_cmd);
    drupal_set_message("Cmode=git return=$return output:<br />" . implode("<br />", $output));
    unset($return);
    unset($output);
  */
  // Allow installation to finish
  //sleep(120);
  // Check the site.
  $url = "http://dev-" . $form_state['values']['website_info']['site_name'] . ".pantheon.berkeley.edu/";
  $test = drupal_http_request($url);
  if (($test->code == 200) || ($test->code == 301) || ($test->code == 302)) {
    drupal_set_message("Your site is ready at " . l($url, $url, array('attributes' => array('target' => "_new"))));
  }
  else {
    drupal_set_message("Your site didn't return a normal status. Check it out at " . l($url, $url, array('attributes' => array('target' => "_new"))), "warning");
  }
  //drupal_set_message(var_dump($response));


}

/**
 * Mock functionality for ITLG demo
 *
 * Display a list of user sites
 */
function ucberkeley_website_demo_mysites() {

  drupal_add_library('system', 'drupal.collapse');
  drupal_set_title("Your sites");
  $data = array();
  $submissions = variable_get("ucberkeley_website_submissions", array());
  krsort($submissions);
  if (count($submissions) == 0) {
    return array(
      '#markup' => "<h3>You don't yet have any Open Berkeley sites</h3><p>To create a site " . l("please see this page", "web-hosting/get-open-berkeley") . ".</p>"
    );
  }
  foreach ($submissions as $submission) {
    $data[] = ucberkeley_website_site_information($submission);
  }
  return $data;
}

function ucberkeley_website_site_information($submission, $title = TRUE, $fieldset = TRUE, $table_headers = TRUE) {
  $date_format = "Y-m-d g:i:s a";
  $render = array();
  $fieldset_children = array();
  if ($table_headers) {
    $headers = array(t('Question'), t('Your Answer'));
  }
  else {
    $headers = array();
  }

  $site_url_no_http = 'test-' . $submission['values']['website_info']['site_short_name'] . '.pantheon.berkeley.edu';
  $site_url = 'http://' . $site_url_no_http;
  if ($title) {
    $site_title = $site_url_no_http;
  }
  else {
    $site_title = "";
  }

  $render[] = array(
    '#theme' => 'item_list',
    '#title' => $site_title,
    '#items' => array(
      "<b>Front Page:</b> " . l($site_url, $site_url, array('attributes' => array('target' => "_new"))),
      "<b>Admin Login:</b> " . l($site_url . "/cas", $site_url . "/cas", array('attributes' => array('target' => "_new"))),
      "<i>Created Date: " . format_date($submission['values']['requester']['request_timestamp'], "custom", $date_format) . "</i>"
    )
  );

  if (!$title) {
    $render[] = array(
      '#markup' => "\n\n"
    );
  }

  foreach (array_keys($submission['values']) as $form_section) {
    $sections_flat[$form_section] = _ucberkeley_website_flatten_array($submission['values'][$form_section]);
    $complete_form_flat[$form_section] = _ucberkeley_website_flatten_array($submission['complete form'][$form_section]);
  }

  foreach ($sections_flat as $key => $values) {

    $fieldset_children[] = array(
      '#markup' => "<h3>" . $submission['complete form'][$key]['#title'] . "</h3>\n"
    );
    $data = array();
    foreach ($values as $k => $v) {
      switch ($k) {
        // Convert checkboxes to Yes or No
        case "mou_agree":
        case "ist":
        case "ets":
          ($v[0] == 1) ? $v[0] = "Yes" : $v[0] = "No";
          break;
        case "request_timestamp":
          $v[0] = format_date($v[0], "custom", $date_format);
          break;
      }
      foreach ($v as $k2 => $v2) {
        ($k2 > 0) ? $num = " $k2" : $num = "";
        switch ($key) {
          case "people":
          case "billing_hosting":
            //TODO: Would be nice not to rely on the machine names here. Update
            //the titles for these elements
            $label = ucwords(str_replace("_", " ", $k));
            break;
          default:
            $label = $submission['complete form'][$key][$k]['#title'];
        }
        $data[] = array($label . $num, $v2);
      }
    }
    $fieldset_children[] = array(
      '#theme' => 'table',
      '#header' => $headers,

      //              '#rows' => array(
      //                array('row1col1', 'row2col2'),
      //                array('row2col1', 'row2col2'),
      //              ),

      '#rows' => $data,
    );
  }

  if ($fieldset) {
    $render[] = array(
      '#theme' => 'fieldset',
      '#title' => 'Original Website Request',
      '#attributes' => array('class' => array('collapsible', 'collapsed')),
      //'#description' => '<p><em>' . t('Original website request') . '</em></p>',
      '#children' => drupal_render($fieldset_children),
    );
  }
  else {
    $render = array_merge($render, $fieldset_children);
  }
  return $render;
}

/**
 * Flatten multi-dimentional array preserving keys
 *
 * @param array $array
 * @return array
 */
function _ucberkeley_website_flatten_array(array $array) {
  $return = array();
  array_walk_recursive($array, function ($v, $k) use (&$return) {
    $return[$k][] = $v;
  });
  return $return;
}

function ucberkeley_website_email_confirm($form_state) {
  global $user;
  $account = user_load($user->uid);
  $params = array(
    '!site_name' => $form_state['values']['website_info']['site_name'],
    '!username' => $form_state['values']['requester']['requester_name'],
    '!site_info' => drupal_render(ucberkeley_website_site_information($form_state, FALSE, FALSE, FALSE)),
  );
  $params['!site_info'] = preg_replace("/<\/?tbody>/", "", $params['!site_info']);
  $params['!site_info'] = str_replace('</td><td>', ': </td><td>', $params['!site_info']);
  $params['!site_info'] = strip_tags($params['!site_info']);
  drupal_mail('ucberkeley_website', 'website_creation', $account->mail, user_preferred_language($user), $params);
  //TODO: should we also send this confirmation email to site_email?
}

/**
 * Implements hook_mail().
 */
function ucberkeley_website_mail($key, &$message, $params) {
  $langcode = $message['language']->language;
  $message['subject'] = t('Your new Open Berkeley Site: !site_name', $params, array('langcode' => $langcode));
  $message['body'][] = t("Dear !username,\n\nCongratulations! You have created a new Open Berkeley Website.\n\n!site_info", $params, array('langcode' => $langcode));
}
